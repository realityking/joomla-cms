<?php
/**
 * @version		$Id: helper.php
 * @package		Joomla.Framework
 * @subpackage	Cache
 * @copyright	Copyright (C) 2005 - 2009 Open Source Matters, Inc. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */

// No direct access
defined('JPATH_BASE') or die;

/**
 * Joomla! Captcha helper object.
 * Based on Securimage (http://www.phpcaptcha.org/).
 *
 * @abstract
 * @package		Joomla.Framework
 * @subpackage	CaptchaHelper
 * @since		1.6
 */
class JCaptchaHelper extends JObject
{
	/**
	 * The gd image resource.
	 *
	 * @var	resource
	 */
	private $im;

	/**
	 * The code generated by the script
	 *
	 * @var	string
	 */
	private $code = '';

	/**
	 * Constructor.
	 */
	public function __construct()
	{
		$mparams	= JComponentHelper::getParams('com_media');
		$image_path	= $mparams->get('image_path');
		$file_path	= $mparams->get('file_path');

		/**
		 * Set the default Options
		 *
		 * See the parameters of Securimage plugin for details.
		 */
		$options = array(
			'namespace' => '_default',
			'image_width' => 175,
			'image_height' => 55,
			'image_type' => 'png',// JPG , GIF or PNG
			'code_length' => 4,
			'charset' => 'ABCDEFGHKLMNPRSTUVWYZ23456789',
			'font_type' => 'GD',// GD or TTF
			'gd_font_path' => array($image_path, $file_path, JPATH_LIBRARIES.'/joomla/captcha/gdfonts'),
			'gd_font_file' => 'bubblebath.gdf',
			'gd_font_size' => 20,
			'ttf_font_path' => array($image_path, $file_path, JPATH_LIBRARIES.'/joomla/captcha/ttffonts'),
			'ttf_font_file' => 'elephant.ttf',
			'ttf_font_size' => 25,
			'perturbation' => 0.75,
			'iscale' => 5,
			'text_angle_minimum' => -20,
			'text_angle_maximum' => 20,
			'text_x_start' => 8,
			'background_image_path' => array($image_path, $file_path, JPATH_BASE.'/media/system/images/captcha'),
			'background_image_file' => -1,
			'image_bg_color' => new JCaptcha_Color(0xff, 0xff, 0xff),
			'text_color' => array(new JCaptcha_Color(0x0, 0x0, 0x0),
										new JCaptcha_Color(0x0, 0x0, 0x33),
										new JCaptcha_Color(0x0, 0x33, 0x33),
										new JCaptcha_Color(0x0, 0x33, 0x00)),
			'use_transparent_text' => true,
			'text_transparency_percentage' => 15,
			'line_color' => new JCaptcha_Color(0x3d, 0x3d, 0x3d),
			'num_lines' => 10,
			'draw_lines' => 'under',
			'case_sensitive' => false,
			'output' => 'file', // file or browser
			'file_path' => JFactory::getConfig()->get('tmp_path')
		);
		$this->setProperties($options);
	}

	/**
	 * Generate and output the image to a file or to the browser
	 */
	public function create()
	{
		// Remove old captchas
		$this->purgeCaptchas();

		// Create the image
		if ($this->font_type == 'GD') $this->iscale = 1;
		if ($this->use_transparent_text == true || $this->background_image_file != -1)
		{
			$this->im		= imagecreatetruecolor($this->image_width, $this->image_height);
			$this->tmpimg	= imagecreatetruecolor($this->image_width * $this->iscale, $this->image_height * $this->iscale);
		}
		else
		{
			// No transparency
			$this->im		= imagecreate($this->image_width, $this->image_height);
			$this->tmpimg	= imagecreate($this->image_width * $this->iscale, $this->image_height * $this->iscale);
		}

		$this->allocateColors();
		imagepalettecopy($this->tmpimg, $this->im);

		// Set the background of the CAPTCHA image
		$this->setBackgroundColor();

		if ($this->background_image_file != -1) $this->setBackgroundImage();

		// Create a code
		$this->createCode();

		// Create the id and the filename
		$this->generateId();

		// Save the data in the session
		$this->saveData();

		// Draw lines under the text
		if ($this->draw_lines == 'below' && $this->num_lines > 0) $this->drawLines();

		// Draw the CAPTCHA code over the image
		$this->drawWord();
		if ($this->font_type == 'TTF') $this->distortedCopy();

		// Draw lines below the text
		if ($this->draw_lines == 'above' && $this->num_lines > 0) $this->drawLines();

		// Output to...
		if (strtolower($this->output) == 'browser')
		{
			// the browser
			$this->outputBrowser();
		}
		else
		{
			// a file.
			$this->outputFile();
		}

		return true;
	}

	/**
	 * Allocate all colors that will be used in the CAPTCHA image
	 */
	private function allocateColors()
	{
		// allocate bg color first for imagecreate
		$this->gdbgcolor = imagecolorallocate($this->im, $this->image_bg_color->r, $this->image_bg_color->g, $this->image_bg_color->b);

		$alpha = intval($this->text_transparency_percentage / 100 * 127);

		if ($this->use_transparent_text) {
			$this->gdlinecolor = imagecolorallocatealpha($this->im, $this->line_color->r, $this->line_color->g, $this->line_color->b, $alpha);
		} else {
			$this->gdlinecolor = imagecolorallocate($this->im, $this->line_color->r, $this->line_color->g, $this->line_color->b);
		}

		if (is_array($this->text_color))
		{
			foreach($this->text_color as $color)
			{
				if ($this->use_transparent_text == true) {
					$this->gdtextcolor[] = imagecolorallocatealpha($this->im, $color->r, $color->g, $color->b, $alpha);
				} else {
					$this->gdtextcolor[] = imagecolorallocate($this->im, $color->r, $color->g, $color->b);
				}
			}
		} 
		else
		{
			if ($this->use_transparent_text == true) {
				$this->gdtextcolor = imagecolorallocatealpha($this->im, $this->text_color->r, $this->text_color->g, $this->text_color->b, $alpha);
			} else {
				$this->gdtextcolor = imagecolorallocate($this->im, $this->text_color->r, $this->text_color->g, $this->text_color->b);
			}
		}
	}

	/**
	 * Create the id and the filename
	 */
	private function generateId()
	{
		$this->id		= mt_rand();
		$this->filename	= 'jcaptcha.'.$this->id.'.'.$this->image_type;
	}

	/**
	 * Save the data in the session
	 */
	private function saveData()
	{
		// Get the Application
		$app = JFactory::getApplication();

		// Get the captchas
		$captchas = $app->getUserState($this->namespace.'.JCaptcha', array());

		// Add a new captcha
		$captchas[$this->id] = array('id' => $this->id, 'code' => $this->code, 'file' => $this->filename);

		// Save in the session
		$app->setUserState($this->namespace.'.JCaptcha', $captchas);
	}

	/**
	 * Set the background of the CAPTCHA image
	 */
	private function setBackgroundColor()
	{
		imagefilledrectangle($this->im, 0, 0, $this->image_width * $this->iscale, $this->image_height * $this->iscale, $this->gdbgcolor);
		imagefilledrectangle($this->tmpimg, 0, 0, $this->image_width * $this->iscale, $this->image_height * $this->iscale, $this->gdbgcolor);
	}

	/**
	 * Set the background of the CAPTCHA image
	 */
	private function setBackgroundImage()
	{
		$bgimg = JPath::find($this->background_image_path, $this->background_image_file);
		if(!is_readable($bgimg)) return;
		$dat = @getimagesize($bgimg);
		if($dat == false) return;

		switch($dat[2])
		{
			case 1:
				$newim = @imagecreatefromgif($bgimg);
				break;
			case 2:
				$newim = @imagecreatefromjpeg($bgimg);
				break;
			case 3:
				$newim = @imagecreatefrompng($bgimg);
				break;
			case 15:
				$newim = @imagecreatefromwbmp($bgimg);
				break;
			case 16:
				$newim = @imagecreatefromxbm($bgimg);
				break;
			default:
				return;
		}

		if(!$newim) return;

		imagecopyresized($this->im, $newim, 0, 0, 0, 0, $this->image_width, $this->image_height, imagesx($newim), imagesy($newim));
	}

	/**
	 * Draw lines on the image
	 */
	private function drawLines()
	{
		for ($line = 0; $line < $this->num_lines; ++$line)
		{
			$x = $this->image_width * (1 + $line) / ($this->num_lines + 1);
			$x += (0.5 - $this->frand()) * $this->image_width / $this->num_lines;
			$y = rand($this->image_height * 0.1, $this->image_height * 0.9);

			$theta = ($this->frand()-0.5) * M_PI * 0.7;
			$w = $this->image_width;
			$len = rand($w * 0.4, $w * 0.7);
			$lwid = rand(0, 2);

			$k = $this->frand() * 0.6 + 0.2;
			$k = $k * $k * 0.5;
			$phi = $this->frand() * 6.28;
			$step = 0.5;
			$dx = $step * cos($theta);
			$dy = $step * sin($theta);
			$n = $len / $step;
			$amp = 1.5 * $this->frand() / ($k + 5.0 / $len);
			$x0 = $x - 0.5 * $len * cos($theta);
			$y0 = $y - 0.5 * $len * sin($theta);

			$ldx = round(-$dy * $lwid);
			$ldy = round($dx * $lwid);

			for ($i = 0; $i < $n; ++$i) {
				$x = $x0 + $i * $dx + $amp * $dy * sin($k * $i * $step + $phi);
				$y = $y0 + $i * $dy - $amp * $dx * sin($k * $i * $step + $phi);
				imagefilledrectangle($this->im, $x, $y, $x + $lwid, $y + $lwid, $this->gdlinecolor);
			}
		}
	}

	/**
	 * Draw the CAPTCHA code over the image
	 */
	private function drawWord()
	{
		$width2		= $this->image_width * $this->iscale;
		$height2	= $this->image_height * $this->iscale;

		if ($this->font_type == 'GD')
		{
			if (!is_int($this->gd_font_file))//is a file name
			{
				$file = JPath::find($this->gd_font_path, $this->gd_font_file);
				$font = @imageloadfont($file);
				if ($font == false) {
					trigger_error("Failed to load GD Font file {$file} ", E_USER_WARNING);
					return;
				}
			} else { //gd font identifier
				$font = $this->gd_font_file;
			}
			if (is_array($this->gdtextcolor)) {
				$font_color = $this->gdtextcolor[rand(0, count($this->gdtextcolor) - 1)];
			} else {
				$font_color = $this->gdtextcolor;
			}

			imagestring($this->im, $font, $this->text_x_start, ($this->image_height / 2) - ($this->gd_font_size / 2), $this->code, $font_color);
		}
		else
		{
			$file = JPath::find($this->ttf_font_path, $this->ttf_font_file);

			$strlen = strlen($this->code);

			if (!is_array($this->gdtextcolor) && $this->text_angle_minimum == 0 && $this->text_angle_maximum == 0) { // no angled or multi-color characters
				imagettftext($this->tmpimg, $font_size, 0, $x, $y, $this->gdtextcolor, $file, $this->code);
			}
			else
			{
				$font_size = $height2 * .35;
				$bb = imagettfbbox($font_size, 0, $file, $this->code);
				$tx = $bb[4] - $bb[0];
				$ty = $bb[5] - $bb[1];
				$x  = floor($width2 / 2 - $tx / 2 - $bb[0]);
				$y  = round($height2 / 2 - $ty / 2 - $bb[1]);

				for($i = 0; $i < $strlen; ++$i)	
				{
					$angle = rand($this->text_angle_minimum, $this->text_angle_maximum);
					$y = rand($y - 5, $y + 5);
					if (is_array($this->gdtextcolor)) {
						$font_color = $this->gdtextcolor[rand(0, count($this->gdtextcolor) - 1)];
					} else {
						$font_color = $this->gdtextcolor;
					}

					$ch = $this->code{$i};

					imagettftext($this->tmpimg, $font_size, $angle, $x, $y, $font_color, $file, $ch);

					// estimate character widths to increment $x without creating spaces that are too large or too small
					// these are best estimates to align text but may vary between fonts
					// for optimal character widths, do not use multiple text colors or character angles and the complete string will be written by imagettftext
					if (strpos('abcdeghknopqsuvxyz', $ch) !== false) {
						$min_x = $font_size - ($this->iscale * 6);
						$max_x = $font_size - ($this->iscale * 6);
					} else if (strpos('ilI1', $ch) !== false) {
						$min_x = $font_size / 5;
						$max_x = $font_size / 3;
					} else if (strpos('fjrt', $ch) !== false) {
						$min_x = $font_size - ($this->iscale * 12);
						$max_x = $font_size - ($this->iscale * 12);
					} else if ($ch == 'wm') {
						$min_x = $font_size;
						$max_x = $font_size + ($this->iscale * 3);
					} else { // numbers, capitals or unicode
						$min_x = $font_size + ($this->iscale * 2);
						$max_x = $font_size + ($this->iscale * 5);
					}

					$x += rand($min_x, $max_x);
				}
			}
		}
	}

	/**
	 * Warp text from temporary image onto final image.
	 * Modified for securimage
	 *
	 * @author Han-Kwang Nienhuys modified
	 * @copyright Han-Kwang Neinhuys
	 *
	 */
	private function distortedCopy()
	{
		$numpoles = 3; // distortion factor

		// make array of poles AKA attractor points
		for ($i = 0; $i < $numpoles; ++$i)
		{
			$px[$i]  = rand($this->image_width * 0.3, $this->image_width * 0.7);
			$py[$i]  = rand($this->image_height * 0.3, $this->image_height * 0.7);
			$rad[$i] = rand($this->image_width * 0.4, $this->image_width * 0.7);
			$tmp	 = -$this->frand() * 0.15 - 0.15;
			$amp[$i] = $this->perturbation * $tmp;
		}

		$bgCol   = imagecolorat($this->tmpimg, 0, 0);
		$width2  = $this->iscale * $this->image_width;
		$height2 = $this->iscale * $this->image_height;

		imagepalettecopy($this->im, $this->tmpimg); // copy palette to final image so text colors come across

		// loop over $img pixels, take pixels from $tmpimg with distortion field
		for ($ix = 0; $ix < $this->image_width; ++$ix)
		{
			for ($iy = 0; $iy < $this->image_height; ++$iy)
			{
				$x = $ix;
				$y = $iy;

				for ($i = 0; $i < $numpoles; ++$i) {
					$dx = $ix - $px[$i];
					$dy = $iy - $py[$i];
					if ($dx == 0 && $dy == 0) continue;

					$r = sqrt($dx * $dx + $dy * $dy);
					if ($r > $rad[$i]) continue;

					$rscale = $amp[$i] * sin(3.14 * $r / $rad[$i]);
					$x += $dx * $rscale;
					$y += $dy * $rscale;
				}

				$c = $bgCol;
				$x *= $this->iscale;
				$y *= $this->iscale;

				if ($x >= 0 && $x < $width2 && $y >= 0 && $y < $height2) {
					$c = imagecolorat($this->tmpimg, $x, $y);
				}

				if ($c != $bgCol) { // only copy pixels of letters to preserve any background image
					imagesetpixel($this->im, $ix, $iy, $c);
				}
			}
		}
	}

	/**
	 * Create a code
	 */
	private function createCode()
	{
		$this->code = $this->generateCode();
	}

	/**
	 * Generate a code
	 *
	 * @return	string	The Generated Code
	 */
	private function generateCode()
	{
		$code = '';

		for($i = 1, $cslen = strlen($this->charset); $i <= $this->code_length; ++$i) {
			$code .= strtoupper( $this->charset{rand(0, $cslen - 1)} );
		}
		return $code;
	}

	/**
	 * Output image to the browser
	 */
	private function outputBrowser()
	{
		header("Expires: Sun, 1 Jan 2000 12:00:00 GMT");
		header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT");
		header("Cache-Control: no-store, no-cache, must-revalidate");
		header("Cache-Control: post-check=0, pre-check=0", false);
		header("Pragma: no-cache");

		switch(strtolower($this->image_type))
		{
			case 'jpg':
				header("Content-Type: image/jpeg");
				imagejpeg($this->im, null, 90);
				break;

			case 'gif':
				header("Content-Type: image/gif");
				imagegif($this->im);
				break;

			case 'png':
			default:
				header("Content-Type: image/png");
				imagepng($this->im);
				break;
		}

		imagedestroy($this->im);
		JFactory::getApplication()->close();
	}

	/**
	 * Output image to a file
	 */
	private function outputFile()
	{
		$path = $this->file_path;
		$filename = $path.'/'.$this->filename;

		switch(strtolower($this->image_type))
		{
			case 'jpg':
				imagejpeg($this->im, $filename, 90);
				break;

			case 'gif':
				imagegif($this->im, $filename);
				break;

			case 'png':
			default:
				imagepng($this->im, $filename);
				break;
		}

		imagedestroy($this->im);

		// Set the URI of the file
		$r = JURI::root(true);
		$path = explode($r, str_replace(DS, '/', $path));
		$this->fileUri = $r.$path[1].'/'.$this->filename;

		return true;
	}

	/**
	 * Remove old Captchas images files from the tmp folder
	 */
	private function purgeCaptchas($session = true, $tmp = true)
	{
		// Import
		jimport('joomla.filesystem.file');

		// Initialise variables
		$return = null;

		// Get the path
		$path = $this->file_path;

		if($session)
		{
			// Get the Application
			$app = JFactory::getApplication();

			// Get the captchas
			$captchas = $app->getUserState($this->namespace.'.JCaptcha', array());

			if (!empty($captchas))
			{
				// Iterate the captchas and delete the files
				foreach ($captchas as $captcha)
				{
					// Store for delete
					$file = $path.'/'.$captcha['file'];
					if(JFile::exists($file)) $session_excludes[] = $file;
				}

				// Delete the files
				if (!empty($session_excludes)) $return = JFile::delete($session_excludes);
			}
			
			// Leave only the las 4 captchas in the session
			if (count($captchas) >= 4){
				$captchas = array_slice($captchas, -3, null, true);
				$app->setUserState($this->namespace.'.JCaptcha', $captchas);
			}
		}

		if($tmp)
		{
			jimport('joomla.filesystem.folder');
			$past = time() - JFactory::getConfig()->get('lifetime', 15) * 60;

			// Get the files
			if (($files = JFolder::files($path, '^jcaptcha\.[0-9]{9, 10}\.(png|gif|jpg)$')) === false)
			{
				$e = new JException(JText::_('JLIB_CAPTCHA_ERROR_GETTING_FILES_FROM_TMP_FOLDER'));
				$this->setError($e);
				return false;
			}

			if(!empty($files))
			{
				// Initialise variables
				$file_excludes = null;

				foreach ($files as $file)
				{
					$ftime = filemtime($path.'/'.$file);

					// Check if the file is older than the session time
					if ($ftime < $past)
					{
						// Store for delete
						$file = $path.'/'.$file;
						if(JFile::exists($file)) $file_excludes[] = $file;
					}
				}

				// Delete the files
				if (!empty($file_excludes)) $return = JFile::delete($file_excludes);
			}
		}

		return $return;
	}

	/**
	 * Validate the code entered by the user.
	 *
	 * @param	int		$id		The Id of the captcha
	 * @param	string	$code	The code the user entered
	 * @return	boolean	true if the code was correct, false if not
	 */
	public function validate($id, $input)
	{
		// Get the Application
		$app = JFactory::getApplication();

		// Get the captchas
		$captchas = $app->getUserState($this->namespace.'.JCaptcha', array());

		// Check that the specified captcha test exists
		if (!isset($captchas[$id]))
		{
			$e = new JException(JText::_('JLIB_CAPTCHA_ID_NOT_FOUND'));
			$this->setError($e);
			return false;
		}

		// Pull out the code
		$code = $captchas[$id]['code'];

		// Cleanup
		unset($captchas[$id]);
		$app->setUserState($this->namespace.'.JCaptcha', $captchas);
		$this->purgeCaptchas();

		// Adjust case if necessary
		if (!$this->case_sensitive)
		{
			$code	= strtolower($code);
			$input	= strtolower($input);
		}

		// Check if the strings match
		if ($code === $input)
		{
			return true;
		}
		else
		{
			$e = new JException(JText::_('JLIB_CAPTCHA_INCORRECT_SOLUTION'));
			$this->setError($e);
			return false;
		}
	}
	
	/**
	 * Generate random number less than 1
	 * 
	 * @return float
	 */
	private function frand()
	{
		return 0.0001*rand(0,9999);
	}
}

/**
 * Color object for CAPTCHA
 */
class JCaptcha_Color
{
	/**
	 * Red component: 0-255
	 *
	 * @var int
	 */
	public $r;
	/**
	 * Green component: 0-255
	 *
	 * @var int
	 */
	public $g;
	/**
	 * Blue component: 0-255
	 *
	 * @var int
	 */
	public $b;

	/**
	 * Create a new Securimage_Color object.<br />
	 * Specify the red, green, and blue components using their HTML hex code equivalent.<br />
	 * Example: The code for the HTML color #4A203C is:<br />
	 * $color = new Securimage_Color(0x4A, 0x20, 0x3C);
	 *
	 * @param	$red	Red		component 0-255
	 * @param	$green	Green	component 0-255
	 * @param	$blue	Blue	component 0-255
	 */
	public function __construct($red, $green = null, $blue = null)
	{
		if ($green == null && $blue == null && preg_match('/^#[a-f0-9]{3,6}$/i', $red))
		{
			$col = substr($red, 1);
			if (strlen($col) == 3) {
				$red   = str_repeat(substr($col, 0, 1), 2);
				$green = str_repeat(substr($col, 1, 1), 2);
				$blue  = str_repeat(substr($col, 2, 1), 2);
			} else {
				$red   = substr($col, 0, 2);
				$green = substr($col, 2, 2);
				$blue  = substr($col, 4, 2); 
			}
			
			$red   = hexdec($red);
			$green = hexdec($green);
			$blue  = hexdec($blue);
		} else {
			if ($red < 0) $red	   = 0;
			if ($red > 255) $red	 = 255;
			if ($green < 0) $green   = 0;
			if ($green > 255) $green = 255;
			if ($blue < 0) $blue	 = 0;
			if ($blue > 255) $blue   = 255;
		}

		$this->r = $red;
		$this->g = $green;
		$this->b = $blue;
	}
}
